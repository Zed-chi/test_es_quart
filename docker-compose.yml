version: "2.1"

services:
  elastic:
    container_name: elastic
    build:
      context: .
      dockerfile: ./docker_files/elastic
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 5s
      timeout: 10s
      retries: 20
    networks:
      - my_network

  web:
    container_name: webapp
    env_file:
      - ./webapp/.env
    build:
      context: .
      dockerfile: ./docker_files/webapp
    volumes:
      - webapp:/usr/src/app
    command: uvicorn app:app --reload --host 0.0.0.0 --port 80
    ports:
      - 80:80
    depends_on:
      db:
        condition: service_healthy
      elastic:
        condition: service_healthy
    networks:
      - my_network

  db:
    build:
      context: .
      dockerfile: ./docker_files/postgres
    container_name: postgres
    restart: always
    user: postgres
    expose:
      - 5432
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - PGUSER=postgres
    volumes:
      - /var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 3s
      timeout: 5s
      retries: 10
    networks:
      - my_network
volumes:
  webapp:
networks:
  my_network:
